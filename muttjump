#!/bin/bash
# written by Johannes Wei√ül

# muttjump
#
# This script makes mail indexers (like mairix, mu, nmzmail, or notmuch)
# together with mutt more useful.
#
# These search engines usually create a virtual maildir containing symbolic
# links to the original mails, which can be browsed using mutt.
# It would be optimal if mutt somehow knew that the two maildir entries
# identify the same mail, but this is not that easy (mail folder
# abstraction from different formats, no tight integration of mail indexers).
#
# So if one wants to rename (for setting/clearing flags), delete or edit the
# mails, it is only possible using the original mail. This (very simple)
# script helps to jump to this message, using e.g. this macro in .muttrc:
#
# macro generic ,j "<enter-command>push <pipe-message>muttjump<enter><enter>" "jump to original message"
#
# Don't forget to quit the new mutt instance (started by muttjump) after
# the modifications. To make jumping faster (no keypress required), unset
# $wait_key in your ~/.muttrc.
#
# The way described above will open a new instance of mutt. Another option is 
# to invoke this script as muttjump-same. In that case, a file ~/.muttjump 
# will be created. This file will contain instructions for mutt, which will, 
# after sourcing, lead to the jump to the desired message (and deletion of
# ~/.muttjump). For that purpose, following macro might be used:
#
# macro generic ,j "<enter-command>push <pipe-message>muttjump-same<enter><enter><enter-command>source ~/.muttjump<enter>" "jump to original message"
#
# Note: The latter usage of the script can be activated by creating a symlink
# called muttjump-same with this script as a target.

MUTTJUMP_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/muttjump/muttjumprc"

if [ -f $MUTTJUMP_CONFIG ] ; then
    . $MUTTJUMP_CONFIG
fi

# one of: mairix, mairix-0.22, mu, mu-0.9.9.5, mu-0.6,
#          nmzmail, or notmuch (>= 0.5)
MUTTJUMP_INDEXER=${MUTTJUMP_INDEXER:-}

# "limit" or "search" (default)
MUTTJUMP_MODE=${MUTTJUMP_MODE:-search}

# "yes", "no" or "auto"
# If set to "auto", the $STY environment variable is used for auto detection.
MUTTJUMP_USE_SCREEN=${MUTTJUMP_USE_SCREEN:-auto}

# "yes", "no" or "auto"
# If set to yes, open message in same instance of mutt.
MUTTJUMP_SAME=${MUTTJUMP_SAME:-auto}

# "yes" or "no"
# Set this to "yes" if you want exactly one screen window (with mutt running
# inside) per mailbox. With new versions of screen (> 4.00) it is possible
# to do that automatically, with old versions you have to start them
# manually! Setting this to yes implies MUTTJUMP_USE_SCREEN=yes.
MUTTJUMP_MULTI_SCREEN_MODE=${MUTTJUMP_MULTI_SCREEN_MODE:-no}

# function to create the screen window name from the full path of the mailbox
if ! type MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE >/dev/null 2>&1 ; then
    function MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE () {
        basename "$1"
    }
fi

# Version of GNU screen
# Since 4.01.00devel (commit 98b6b41) backslash handling for -X was altered.
MUTTJUMP_SCREEN_VERSION=${MUTTJUMP_SCREEN_VERSION:-auto}

# program paths
MUTT=${MUTT:-mutt}
MAIRIX=${MAIRIX:-mairix}
MU=${MU:-mu}
NMZMAIL=${NMZMAIL:-nmzmail}
NOTMUCH=${NOTMUCH:-notmuch}
SCREEN=${SCREEN:-screen}
WHIPTAIL=${WHIPTAIL:-whiptail --noitem}
DIALOG=${DIALOG:-dialog}

SCRIPT_BASENAME=$(basename "$0")

function die () {
    echo -e >&2 "$0: $1"
    exit 1
}

function quote () {
    echo \'${1//\'/\'\\\'\'}\'
}

function quote_regexp () {
    echo "$1" | sed 's/[][\^.$|)(*+?}{]/\\&/g'
}

function quote_mutt () {
    echo "$1" | sed -e 's/`/\\&/g' -e "s/'/./g"
}

function is_callable () {
    type $1 >/dev/null 2>&1
}

function wc_L () {
    awk '{ y = length(); if (y > x) x = y } END { print x }'
}

# Check if screen is new enough to parse -X (commit 98b6b41) and support
# -Q (commit 8147d08). It (falsely) assumes that screen version > 4.00
# does this. Distributions that use git versions are likely to also keep
# them up to date.
function is_new_screen () {
    sv=$MUTTJUMP_SCREEN_VERSION
    if [ "$sv" = auto ] ; then
        sv=$($SCREEN --version | awk '{print $3}')
    fi
    echo "$sv" | grep -vq "^\(4\.00\|[0-3]\.\)"
}

function usage () {
    cat >&2 <<END
Usage: muttjump [options] msgid
       cat msg | muttjump [options]

This script calls mutt, jumping to the message given in stdin or to the message
identified by "msgid".  With "-R", it jumps to the message being replied to.
It uses a mail search engine (currently mairix, mu, nmzmail, and notmuch are
supported), which can be configured through the MUTTJUMP_INDEXER variable.

Options:
  -h, --help            show this help message and exit
  -i, --indexer PROG    search engine, e.g. mairix, mu, nmzmail, or notmuch
  -m, --mode MODE       limit or search
  -S, --use-screen      open new mutt instance in screen
  -s, --same            do not start new mutt instance
  -H, --header HEADER   search header, defaults to "Message-ID"
  -R                    same as -H In-Reply-To
  -M, --multi           multi-window, when mutt already runs inside screen
END
    exit ${1:-1}
}

function reopen_tty () {
    # Close message-stdin and open terminal-stdin instead.
    # mutt behaves different if STDIN is no terminal
    # TODO: Find cleaner solution (e.g. mutt command-line argument?)
    exec 0<&-
    term="/dev/$(ps -p$$ -otty=)"
    exec < $term
}


# Check command-line arguments and STDIN
search_header="Message-ID"
while [ $# -gt 0 ] ; do
    case $1 in
        -h|--help)
            usage 0
            ;;
        -i|--indexer)
            MUTTJUMP_INDEXER=$2
            shift ; shift
            ;;
        -m|--mode)
            MUTTJUMP_MODE=$2
            shift ; shift
            ;;
        -S|--use-screen)
            MUTTJUMP_USE_SCREEN=yes
            shift
            ;;
        -s|--same)
            MUTTJUMP_SAME=yes
            shift
            ;;
        -H|--header)
            search_header=$2
            shift ; shift
            ;;
        -R)
            search_header="In-Reply-To"
            shift
            ;;
        -M|--multi)
            MUTTJUMP_MULTI_SCREEN_MODE=yes
            shift
            ;;
        --)
            shift ; break
            ;;
        -*)
            die "Unrecognized option: $1"
            ;;
        *)
            break
            ;;
    esac
done

if tty -s ; then
    [ $# -ne 1 ] && usage
else
    [ $# -eq 0 ] || usage
fi

# check if mutt is installed
if ! is_callable $MUTT ; then
    die "$MUTT is not in PATH, set MUTT variable"
fi

DIALOG_PROG=""
if is_callable $WHIPTAIL ; then
    DIALOG_PROG=$WHIPTAIL
elif is_callable $DIALOG ; then
    DIALOG_PROG=$DIALOG
fi

case $MUTTJUMP_MODE in
    limit|search)
        ;;
    *)
        die "variable MUTTJUMP_MODE must be set to \"limit\" or \"search\""
        ;;
esac

# search for Message-ID in STDIN
if [ $# -eq 1 ] ; then
    msgid=$1
else
    msgid=$(sed -E -e '/^\r?$/q' | \
            sed -E -e ':a' -e 'N' -e '$!ba' -e 's/\r?\n([ \t]+)/\1/g' | \
            grep -i -m 1 "^$search_header:" | \
            sed -E 's/^[^:]+:[ \t]*//' | \
            sed -E 's/[ \t]+$//')
fi
if [ -z "$msgid" ] ; then
    die "could not find $search_header header in standard input"
fi
msgid_quoted=$(quote_regexp "$msgid")
msgid_clean=$(echo "$msgid" | sed -e 's/^<//' -e 's/>$//')

# try to locate path of message using a mail search engine
case $MUTTJUMP_INDEXER in
    mairix|mairix-git)
        orig_msgfiles=$($MAIRIX -r "m:$msgid_clean")
        ;;
    mairix-0.22|mairix-old)
        msgid_mairix=$msgid_clean
        # mairix 0.22 or older can't quote special characters (~,/=^) in search
        # words. As a workaround, split Message-ID in 31-character long
        # AND-linked substrings.
        if echo "$msgid_clean" | grep -q '[~,/=^]' ; then
            msgid_mairix=$(echo "$msgid_clean" | sed -e 's/[~,/=^]\+/ /g' \
                -e 's/[^ ]\{31\}/& /g' -e 's/^ \+//g' -e 's/ *$/=/g' \
                -e 's/ /=,/g')
        fi
        orig_msgfiles=$($MAIRIX -r "m:$msgid_mairix")
        ;;
    mu)
        orig_msgfiles=$($MU find $MU_OPTIONS -f l "i:$msgid_clean" | grep -v "^\*\*")
        ;;
    mu-0.9.9.5)
        # 0.9.8.3 - 0.9.9.5: [*'] in "msgid:" search expression not supported
        # 0.9.6 - 0.9.8.2: [*'!] in "msgid:" search expression not supported
        # < 0.9.6: [*'!] in Message-ID itself not supported
        msgid_mu=$(echo "$msgid_clean" | sed 's/[*'\''!].*/*/')
        orig_msgfiles=$($MU find $MU_OPTIONS -f l "i:$msgid_mu" | grep -v "^\*\*")
        ;;
    mu-0.6|mu-old)
        orig_msgfiles=$($MU find $MU_OPTIONS -f p "m:$msgid_clean")
        ;;
    nmzmail)
        nmzmail_results=$(mktemp -d)
        echo "+message-id:/^$msgid_quoted$/" | $NMZMAIL -r "$nmzmail_results" >/dev/null
        orig_msgfiles=$(find "$nmzmail_results" -type l -exec readlink {} \;)
        rm -rf "$nmzmail_results"
        ;;
    notmuch)
        orig_msgfiles=$($NOTMUCH search --output=files "id:$msgid_clean")
        ;;
    "")
        die "variable MUTTJUMP_INDEXER not set or empty"
        ;;
    *)
        die "unknown mail index program \"$MUTTJUMP_INDEXER\""
        ;;
esac

if [ -z "$orig_msgfiles" ] ; then
    die "no message with msgid $msgid found!"
fi

count=$(echo "$orig_msgfiles" | wc -l)
if [ $count -gt 1 -a -n "$DIALOG_PROG" ] ; then
    choices=$(echo "$orig_msgfiles" | while read line ;
        do dirname "$(dirname "$line")" ; echo . ; done)
    maxwidth=$(echo "$choices" | wc_L)
    orig_maildir=$($DIALOG_PROG --clear --title "More than one mailbox found" \
        --menu "Select mailbox:" $((count+8)) $((maxwidth+16)) \
        $count $choices 3>&2 2>&1 1>&3-)
elif [ $count -gt 1 ] ; then
    choices=()
    while read line ; do
        choices=("${choices[@]}" "$(dirname "$(dirname "$line")")")
    done <<<"$orig_msgfiles"
    echo "More than one mailbox found"
    echo "Select mailbox:"
    select md in "${choices[@]}" ; do
        orig_maildir=$md
        break
    done <> /dev/tty
else
    orig_msgfile=$orig_msgfiles
    # get containing maildir of $orig_msgfile
    orig_maildir=$(dirname "$(dirname "$orig_msgfile")")
fi

# Resolve symlinks
orig_maildir=$(cd "$orig_maildir" && pwd -P)

if [ ! -d "$orig_maildir/cur" ] ; then
    die "directory $(quote "$orig_maildir") doesn't exist or is no Maildir"
fi

msgid_mutt=$(quote_mutt "$(quote_regexp "$msgid_quoted")")
jump_expr="~i'$msgid_mutt'"
jump_cmd="<limit>$jump_expr<enter>"
if [ "$MUTTJUMP_MODE" = search ] ; then
    jump_cmd="$jump_cmd<limit>all<enter>"
fi

if [ "$MUTTJUMP_MULTI_SCREEN_MODE" = yes ] ||
        [ "$MUTTJUMP_USE_SCREEN" = auto -a -n "$STY" ] ; then
    MUTTJUMP_USE_SCREEN=yes
fi

if [ "$MUTTJUMP_SAME" = auto ] &&
        [ "$SCRIPT_BASENAME" = "muttjump-same" ] ; then
    MUTTJUMP_SAME=yes
fi

if [ "$MUTTJUMP_SAME" = "yes" ] ; then
    jump_cmd="<change-folder>$orig_maildir<enter>$jump_cmd"
    echo "push \"$jump_cmd<shell-escape>rm ~/.muttjump<enter>\"" > ~/.muttjump
    exit 0
fi

screen_opts=()
screen_query_arg=""
if [ "$MUTTJUMP_USE_SCREEN" = yes ] ; then
    if [ -n "$STY" ] ; then
        screen_opts=("-X" "screen")
        if is_new_screen ; then
            jump_cmd=${jump_cmd/\\/\\\\\\}
            screen_query_arg="-Q"
        fi
    else
        reopen_tty
    fi
    screen_window_name=$(MUTTJUMP_SCREEN_WINDOW_NAME_MANGLE "$orig_maildir")
    screen_opts=("${screen_opts[@]}" "-t" "$screen_window_name")
else
    SCREEN=""
    reopen_tty
fi

if [ "$MUTTJUMP_MULTI_SCREEN_MODE" = yes -a -n "$STY" ] ; then
    $SCREEN -X -p "$screen_window_name" $screen_query_arg \
            select "$screen_window_name" >/dev/null
    if [ $? = 0 ] ; then
        $SCREEN -X -p "$screen_window_name" stuff ":push \"$jump_cmd\""
        exit 0
    fi
fi

# start mutt, open original folder and jump to the original message
$SCREEN "${screen_opts[@]}" $MUTT -f "$orig_maildir" -e "push \"$jump_cmd\""
